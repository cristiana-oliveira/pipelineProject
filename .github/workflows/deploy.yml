# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml -P coverage
    - run: mkdir staging && cp target/*.jar staging
    - uses: actions/upload-artifact@v3
      with:
        name: Package
        path: staging
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
         file: target/my-reports/jacoco.xml
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Deploy to Server 1
      uses: easingthemes/ssh-deploy@main
      env:
        SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        REMOTE_HOST: ${{ secrets.HOST_DNS }}
        REMOTE_USER: ${{ secrets.USERNAME }}
        TARGET: ${{ secrets.TARGET_DIR }}
    - name: AWS SSM Send-Command
      uses: peterkimzz/aws-ssm-send-command@master
      id: ssm
      with:
        aws-region: ${{ secrets.AWS_REGION }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        instance-ids: ${{ secrets.INSTANCE_ID }}
        working-directory: /home/ec2-user
        command: |
          cd /home/ec2-user/
          mkdir opt
          cd opt
          mkdir jdk-17
          cd jdk-17
          wget https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-x64_bin.tar.gz
          tar xvf openjdk-17.0.2_linux-x64_bin.tar.gz
          export JAVA_HOME=/home/ec2-user/opt/jdk-17/jdk-17.0.2/
          export PATH=$PATH:$JAVA_HOME/bin
          cd /home/ec2-user/web-apps/target
          java -jar pipelineProject*.jar
    - name: Install Postman CLI
      uses: actions/checkout@v3
    - run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
    - run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}
    - run: |
           postman collection run "${{ github.workspace }}/postman/collections/Integration Testing.json"
      
